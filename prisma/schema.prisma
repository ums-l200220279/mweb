// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String    @default("user")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  preferences       Json?     // User preferences including accessibility settings
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  cognitiveAssessments CognitiveAssessment[]
  gameResults       GameResult[]
  mmseTests         MMSETest[]
  featureFlagOverrides FeatureFlagOverride[]
  assistantFeedback AssistantFeedback[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Cognitive assessment models
model CognitiveAssessment {
  id                    String   @id @default(cuid())
  userId                String
  createdAt             DateTime @default(now())
  overallScore          Float
  memoryScore           Float
  attentionScore        Float
  processingSpeedScore  Float
  executiveFunctionScore Float
  languageScore         Float?
  notes                 String?  @db.Text
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameResult {
  id                String   @id @default(cuid())
  userId            String
  gameType          String   // memory, attention, processing, executive, language
  score             Float
  timeSpent         Int      // in seconds
  difficulty        String   // easy, medium, hard
  createdAt         DateTime @default(now())
  metadata          Json?    // Additional game-specific data
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MMSETest {
  id                String   @id @default(cuid())
  userId            String
  createdAt         DateTime @default(now())
  score             Int
  orientation       Int
  registration      Int
  attentionCalculation Int
  recall            Int
  language          Int
  notes             String?  @db.Text
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Feature flag models
model FeatureFlag {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  enabled           Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Targeting rules
  rules             Json?    // Rules for enabling the feature for specific users
  
  // Relations
  overrides         FeatureFlagOverride[]
}

model FeatureFlagOverride {
  id                String   @id @default(cuid())
  featureFlagId     String
  userId            String
  enabled           Boolean
  createdAt         DateTime @default(now())
  expiresAt         DateTime?
  
  // Relations
  featureFlag       FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([featureFlagId, userId])
}

// A/B Testing models
model Experiment {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  status            String   // draft, running, paused, completed
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Experiment configuration
  targetPercentage  Float    @default(100) // Percentage of users to include
  targetFilters     Json?    // Filters for targeting specific users
  
  // Relations
  variants          ExperimentVariant[]
  results           ExperimentResult[]
}

model ExperimentVariant {
  id                String   @id @default(cuid())
  experimentId      String
  name              String
  description       String?
  weight            Float    @default(1) // Relative weight for random assignment
  
  // Relations
  experiment        Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  results           ExperimentResult[]
  
  @@unique([experimentId, name])
}

model ExperimentResult {
  id                String   @id @default(cuid())
  experimentId      String
  variantId         String
  userId            String?
  sessionId         String?
  event             String   // impression, conversion, etc.
  value             Float?   // Optional value for the event
  metadata          Json?    // Additional event data
  createdAt         DateTime @default(now())
  
  // Relations
  experiment        Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant           ExperimentVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

// Assistant models
model AssistantFeedback {
  id        String   @id @default(cuid())
  messageId String
  feedback  String
  userId    String
  sessionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([messageId])
  @@index([sessionId])
}

